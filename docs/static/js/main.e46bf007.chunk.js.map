{"version":3,"sources":["assets/logo.png","components/Searchbar/Searchbar.js","store/actions/search.js","store/actions/actionTypes.js","components/UI/Spinner/Spinner.js","components/Results/Card/Card.js","components/Results/Results.js","components/ZoomedCard/ZoomedCard.js","components/UI/Modal/Modal.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/search.js","index.js","assets/pokeball.png"],"names":["module","exports","connect","state","query","search","results","dispatch","setQuery","type","actions","fetchPokemon","pokemonQuery","a","axios","get","data","cards","cardsArray","console","log","props","className","src","Logo","alt","placeholder","onChange","event","target","value","onKeyPress","key","onClick","Pokeball","spinner","pokeball","openModal","index","clickedCardIndex","selectedCard","name","imageUrl","title","id","loading","list","map","card","imageUrlHiRes","zoomedCardIndex","useState","imageLoaded","setImageLoaded","image","e","stopPropagation","artist","hp","types","join","retreatCost","set","rarity","style","display","onLoad","modalOpen","closeModal","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","setSearchQuery","action","setResults","fetchStarted","fetchFinished","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","searchReducer","store","createStore","applyMiddleware","ReduxThunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,+XCyD5BC,eAdS,SAAAC,GACtB,MAAO,CACLC,MAAOD,EAAME,OAAOD,MACpBE,QAASH,EAAME,OAAOC,YAIC,SAAAC,GACzB,MAAO,CACLC,SAAU,SAAAJ,GAAK,OAAIG,ECjDO,SAAAH,GAC5B,MAAO,CACLK,KCL4B,mBDM5BL,MAAOA,GD8CqBM,CAAuBN,KACnDO,aAAc,SAAAP,GAAK,OAAIG,GCvBCK,EDuB6BR,ECtBvD,uCAAO,WAAMG,GAAN,iBAAAM,EAAA,6DACLN,EAbK,CACLE,KCjByB,kBD4BpB,SAEiBK,IAAMC,IAAN,kDACuBH,IAHxC,cAECN,EAFD,gBAKoBA,EAAQU,KAAKC,MALjC,OAKCC,EALD,OAMLX,EAZK,CACLE,KCtB0B,mBDkC1BF,GA5BsBS,EA4BFE,EA3BtBC,QAAQC,IAAIJ,GACL,CACLP,KCZuB,cDavBH,QAASU,KAiBJ,iCArBiB,IAAAA,IAqBjB,OAAP,mDAAM,KADoB,IAAAJ,MD2BbV,EAjDG,SAAAmB,GAChB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAW,2BACd,yBAAKA,UAAW,iBAAkBC,IAAKC,IAAMC,IAAI,UAEnD,yBAAKH,UAAU,eACb,yBAAKA,UAAU,kBAEjB,yBAAKA,UAAW,4BACd,2BAAOA,UAAW,mBAAlB,2CAIF,yBAAKA,UAAW,4BACd,2BACEA,UAAW,kBACXb,KAAK,OACLiB,YAAY,gCACZC,SAAU,SAAAC,GAAK,OAAIP,EAAMb,SAASoB,EAAMC,OAAOC,QAC/CC,WAAY,SAAAH,GAAK,MACD,UAAdA,EAAMI,IAAkBX,EAAMV,aAAaU,EAAMjB,OAAS,QAG9D,4BACEkB,UAAW,mBACXW,QAAS,kBAAMZ,EAAMV,aAAaU,EAAMjB,SAExC,yBAAKmB,IAAKW,IAAUT,IAAI,SAASH,UAAW,8BG3BvCa,G,MAJC,WACd,OAAO,yBAAKV,IAAK,UAAWH,UAAU,SAASC,IAAKa,QCmBvClC,G,MAAAA,YAAQ,MANI,SAAAK,GACzB,MAAO,CACL8B,UAAW,SAAAC,GAAK,OAAI/B,GH2BCgC,EG3B0BD,EH4BjDnB,QAAQC,IAAImB,GACL,CACL9B,KC5CsB,aD6CtB+B,aAAcD,KAJO,IAAAA,MGvBVrC,EAnBF,SAAAmB,GACX,OACE,yBACEC,UAAW,OACXG,IAAKJ,EAAMoB,KACXlB,IAAKF,EAAMqB,SACXC,MAAOtB,EAAMoB,KACbG,GAAIvB,EAAMuB,GACVX,QAAS,kBAAMZ,EAAMgB,UAAUhB,EAAMiB,cCuB5BpC,G,MAAAA,aAPS,SAAAC,GACtB,MAAO,CACLG,QAASH,EAAME,OAAOC,QACtBuC,QAAS1C,EAAME,OAAOwC,WAIc,KAAzB3C,EA9BC,SAAAmB,GACd,IAAIyB,EAAO,sDAmBX,OAjBIzB,EAAMwB,QACRC,EAAO,kBAAC,EAAD,MACEzB,EAAMf,UACfwC,EAAOzB,EAAMf,QAAQyC,KAAI,SAACC,EAAMV,GAC9B,OACE,kBAAC,EAAD,CACEN,IAAKgB,EAAKJ,GACVA,GAAII,EAAKJ,GACTN,MAAOA,EACPG,KAAMO,EAAKP,KACXC,SAAUM,EAAKN,SACfO,cAAeD,EAAKC,oBAMrB,yBAAK3B,UAAW,WAAYwB,O,gBCiCtB5C,G,MAAAA,aAPS,SAAAC,GACtB,MAAO,CACLqC,aAAcrC,EAAME,OAAO6C,gBAC3B5C,QAASH,EAAME,OAAOC,WAIXJ,EAtDI,SAAAmB,GAEjB,IAAM2B,EAAO3B,EAAMf,QAAQe,EAAMmB,cAFP,EAIYW,oBAAS,GAJrB,mBAInBC,EAJmB,KAINC,EAJM,KAMpBC,EAAQF,EACZ,yBAAK9B,UAAW,iBACd,yBAAKA,UAAU,YAAYW,QAAS,SAAAsB,GAAC,OAAIA,EAAEC,oBACzC,yBAAKb,MAAOK,EAAKP,KAAMhB,IAAKuB,EAAKP,KAAMlB,IAAKyB,EAAKC,gBACjD,sCAAYD,EAAKS,SAEnB,yBAAKnC,UAAU,aAAaW,QAAS,SAAAsB,GAAC,OAAIA,EAAEC,oBAC1C,wBAAIlC,UAAU,SAAd,wBAA4C0B,EAAKP,MACjD,0CAAgBO,EAAKU,IACrB,+CAAqBV,EAAKW,MAAQX,EAAKW,MAAMC,KAAK,KAAO,MACzD,6CACkBZ,EAAKa,YAAcb,EAAKa,YAAYD,KAAK,KAAO,KAElE,mCAASZ,EAAKc,KACd,6CAAmBd,EAAKe,QACxB,yCAAef,EAAKJ,MAIxB,6BACE,kBAAC,EAAD,OAkBJ,OAbE,oCACGU,EAED,yBAAKU,MAAO,CAAEC,QAAS,SACrB,yBACE1C,IAAKyB,EAAKC,cACVxB,IAAK,cACLyC,OAAQ,kBAAMb,GAAe,YCTxBnD,eAXS,SAAAC,GACtB,MAAO,CACLgE,UAAWhE,EAAME,OAAO8D,cAGD,SAAA5D,GACzB,MAAO,CACL6D,WAAY,kBAAM7D,ENYb,CACLE,KCtCuB,oBK6BZP,EA3BD,SAAAmB,GAaZ,OATYA,EAAM8C,UAChB,oCACE,yBAAK7C,UAAU,QAAQW,QAAS,kBAAMZ,EAAM+C,eACzC,IACD,kBAAC,EAAD,QAGF,QCASC,MAVf,SAAahD,GACX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0OClBC,IAAMC,EAAe,SAACC,EAAWC,GACtC,O,yVAAO,CAAP,GACKD,EADL,GAEKC,ICADC,EAAe,CACnB1E,MAAO,KACPE,QAAS,KACTuC,SAAS,EACTsB,WAAW,EACXjB,gBAAiB,MAGb6B,EAAiB,SAAC5E,EAAO6E,GAC7B,OAAOL,EAAaxE,EAAO,CAAEC,MAAO4E,EAAO5E,SAEvC6E,EAAa,SAAC9E,EAAO6E,GACzB,OAAOL,EAAaxE,EAAO,CAAEG,QAAS0E,EAAO1E,WAEzC4E,EAAe,SAAC/E,EAAO6E,GAC3B,OAAOL,EAAaxE,EAAO,CAAE0C,SAAS,KAElCsC,EAAgB,SAAChF,EAAO6E,GAC5B,OAAOL,EAAaxE,EAAO,CAAE0C,SAAS,KAElCuB,EAAa,SAACjE,EAAO6E,GACzB,OAAOL,EAAaxE,EAAO,CAAEgE,WAAW,KAEpC9B,EAAY,SAAClC,EAAO6E,GACxB,OAAOL,EAAaxE,EAAO,CACzBgE,WAAW,EACXjB,gBAAiB8B,EAAOxC,gBAiCb4C,EA7BC,WAAmC,IAAlCjF,EAAiC,uDAAzB2E,EAAcE,EAAW,uCAChD,OAAQA,EAAOvE,MACb,ITnC4B,mBSoC1B,OAAOsE,EAAe5E,EAAO6E,GAC/B,ITpCuB,cSqCrB,OAAOC,EAAW9E,EAAO6E,GAC3B,ITpCyB,gBSqCvB,OAAOE,EAAa/E,GACtB,ITrC0B,iBSsCxB,OAAOgF,EAAchF,GACvB,ITrCuB,cSsCrB,OAAOiE,EAAWjE,GACpB,ITtCsB,aSuCpB,OAAOkC,EAAUlC,EAAO6E,GAW1B,QACE,OAAO7E,I,eC7CPkF,EAAmBd,OAAOe,sCAAwCC,IAElEC,EAAcC,YAAgB,CAClCpF,OAAQqF,IAGJC,EAAQC,YACZJ,EACAH,EAAiBQ,YAAgBC,OAG7BC,EACJ,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAIJK,IAASC,OAAOF,EAAKG,SAASC,eAAe,SHmGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBInInBzG,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.e46bf007.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7bbe3170.png\";","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nimport \"./Searchbar.scss\";\r\nimport Logo from \"../../assets/logo.png\";\r\nimport Pokeball from \"../../assets/pokeball.png\";\r\n\r\nconst Searchbar = props => {\r\n  return (\r\n    <div className=\"Searchbar\">\r\n      <div className={\"Searchbar-logo__wrapper\"}>\r\n        <img className={\"Searchbar-logo\"} src={Logo} alt=\"logo\" />\r\n      </div>\r\n      <div className=\"poke-circle\">\r\n        <div className=\"poke-circle2\"></div>\r\n      </div>\r\n      <div className={\"Searchbar-label__wrapper\"}>\r\n        <label className={\"Searchbar-label\"}>\r\n          What pokemon card are you looking for?\r\n        </label>\r\n      </div>\r\n      <div className={\"Searchbar-input__wrapper\"}>\r\n        <input\r\n          className={\"Searchbar-input\"}\r\n          type=\"text\"\r\n          placeholder=\"Search for Pokemon TCG cards!\"\r\n          onChange={event => props.setQuery(event.target.value)}\r\n          onKeyPress={event =>\r\n            event.key === \"Enter\" ? props.fetchPokemon(props.query) : null\r\n          }\r\n        />\r\n        <button\r\n          className={\"Searchbar-button\"}\r\n          onClick={() => props.fetchPokemon(props.query)}\r\n        >\r\n          <img src={Pokeball} alt=\"Search\" className={\"Searchbar-buttonImg\"} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.search.query,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setQuery: query => dispatch(actions.setSearchQuery(query)),\r\n    fetchPokemon: query => dispatch(actions.fetchPokemon(query))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Searchbar);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const setSearchQuery = query => {\r\n  return {\r\n    type: actionTypes.SET_SEARCH_QUERY,\r\n    query: query\r\n  };\r\n};\r\n\r\nexport const setResults = data => {\r\n  console.log(data);\r\n  return {\r\n    type: actionTypes.SET_RESULTS,\r\n    results: data\r\n  };\r\n};\r\n\r\nexport const fetchStarted = data => {\r\n  return {\r\n    type: actionTypes.FETCH_STARTED\r\n  };\r\n};\r\n\r\nexport const fetchFinished = data => {\r\n  return {\r\n    type: actionTypes.FETCH_FINISHED\r\n  };\r\n};\r\n\r\nexport const fetchPokemon = pokemonQuery => {\r\n  return async dispatch => {\r\n    dispatch(fetchStarted());\r\n    const results = await axios.get(\r\n      `https://api.pokemontcg.io/v1/cards?name=${pokemonQuery}`\r\n    );\r\n    const cardsArray = await results.data.cards;\r\n    dispatch(fetchFinished());\r\n    dispatch(setResults(cardsArray));\r\n  };\r\n};\r\n\r\nexport const closeModal = () => {\r\n  return {\r\n    type: actionTypes.CLOSE_MODAL\r\n  };\r\n};\r\n\r\nexport const openModal = clickedCardIndex => {\r\n  console.log(clickedCardIndex);\r\n  return {\r\n    type: actionTypes.OPEN_MODAL,\r\n    selectedCard: clickedCardIndex\r\n  };\r\n};\r\n\r\n// async example\r\n// export const purchaseBurger = (orderData, token) => {\r\n//     return dispatch => {\r\n//       dispatch(purchaseBurgerStart());\r\n//       axios\r\n//         .post(\"/orders.json?auth=\" + token, orderData)\r\n//         .then(response => {\r\n//           dispatch(purchaseBurgerSuccess(response.data.name, orderData));\r\n//         })\r\n//         .catch(error => {\r\n//           dispatch(purchaseBurgerFail());\r\n//         });\r\n//     };\r\n//   };\r\n","export const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\r\nexport const SET_RESULTS = \"SET_RESULTS\";\r\n\r\nexport const FETCH_STARTED = \"FETCH_STARTED\";\r\nexport const FETCH_FINISHED = \"FETCH_FINISHED\";\r\n\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\nexport const OPEN_MODAL = \"OPEN_MODAL\";\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nimport pokeball from \"../../../assets/pokeball.png\";\r\n\r\nconst spinner = () => {\r\n  return <img alt={\"spinner\"} className=\"rotate\" src={pokeball} />;\r\n};\r\n\r\nexport default spinner;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <img\r\n      className={\"Card\"}\r\n      alt={props.name}\r\n      src={props.imageUrl}\r\n      title={props.name}\r\n      id={props.id}\r\n      onClick={() => props.openModal(props.index)}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openModal: index => dispatch(actions.openModal(index))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Card);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport Card from \"./Card/Card\";\r\n\r\nimport \"./Results.css\";\r\n\r\nconst results = props => {\r\n  let list = <p>Waiting for your input!</p>;\r\n\r\n  if (props.loading) {\r\n    list = <Spinner />;\r\n  } else if (props.results) {\r\n    list = props.results.map((card, index) => {\r\n      return (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          index={index}\r\n          name={card.name}\r\n          imageUrl={card.imageUrl}\r\n          imageUrlHiRes={card.imageUrlHiRes}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  return <div className={\"Results\"}>{list}</div>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    results: state.search.results,\r\n    loading: state.search.loading\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(results);\r\n","import React, { useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./ZoomedCard.css\";\r\n\r\nconst ZoomedCard = props => {\r\n  //assigning props to card\r\n  const card = props.results[props.selectedCard];\r\n\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const image = imageLoaded ? (\r\n    <div className={\"zoomedWrapper\"}>\r\n      <div className=\"leftPanel\" onClick={e => e.stopPropagation()}>\r\n        <img title={card.name} alt={card.name} src={card.imageUrlHiRes}></img>\r\n        <p>Artist: {card.artist}</p>\r\n      </div>\r\n      <div className=\"rightPanel\" onClick={e => e.stopPropagation()}>\r\n        <h3 className=\"title\">Card information for {card.name}</h3>\r\n        <p>Hit Points: {card.hp}</p>\r\n        <p>Pokemon type(s): {card.types ? card.types.join(\" \") : null}</p>\r\n        <p>\r\n          Reatreat Cost: {card.retreatCost ? card.retreatCost.join(\" \") : \"0\"}\r\n        </p>\r\n        <p>Set: {card.set}</p>\r\n        <p>Card's Rarity: {card.rarity}</p>\r\n        <p>Unique ID: {card.id}</p>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Spinner />\r\n    </div>\r\n  );\r\n\r\n  const cardReady = (\r\n    <>\r\n      {image}\r\n      {/* hidden div to render the wrapper only after it hi res image is loaded */}\r\n      <div style={{ display: \"none\" }}>\r\n        <img\r\n          src={card.imageUrlHiRes}\r\n          alt={\"placeholder\"}\r\n          onLoad={() => setImageLoaded(true)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return cardReady;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedCard: state.search.zoomedCardIndex,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ZoomedCard);\r\n\r\n//Sample data from one card\r\n// artist: \"5ban Graphics\"\r\n// attacks: (2) [{…}, {…}]\r\n// convertedRetreatCost: 1\r\n// hp: \"130\"\r\n// id: \"xyp-XY174\"\r\n// imageUrl: \"https://images.pokemontcg.io/xyp/XY174.png\"\r\n// imageUrlHiRes: \"https://images.pokemontcg.io/xyp/XY174_hires.png\"\r\n// name: \"Pikachu-EX\"\r\n// nationalPokedexNumber: 25\r\n// number: \"XY174\"\r\n// rarity: \"Common\"\r\n// resistances: [{…}]\r\n// retreatCost: [\"Colorless\"]\r\n// series: \"XY\"\r\n// set: \"XY Black Star Promos\"\r\n// setCode: \"xyp\"\r\n// subtype: \"EX\"\r\n// supertype: \"Pokémon\"\r\n// text: [\"When a Pokémon-EX has been Knocked Out, your opponent takes 2 Prize cards.\"]\r\n// types: [\"Lightning\"]\r\n// weaknesses: [{…}]\r\n//\r\n// STOP PROPAGATION?\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport ZoomedCard from \"../../ZoomedCard/ZoomedCard\";\r\n\r\nconst Modal = props => {\r\n  // if show then display backdrop + zoomed card\r\n  // split modal to backdrop and zoomed card?\r\n\r\n  let modal = props.modalOpen ? (\r\n    <>\r\n      <div className=\"Modal\" onClick={() => props.closeModal()}>\r\n        {\" \"}\r\n        <ZoomedCard />\r\n      </div>\r\n    </>\r\n  ) : null;\r\n\r\n  return modal;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modalOpen: state.search.modalOpen\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closeModal: () => dispatch(actions.closeModal())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\n//components\r\nimport SearchBar from \"./components/Searchbar/Searchbar\";\r\nimport Results from \"./components/Results/Results\";\r\nimport Modal from \"./components/UI/Modal/Modal\";\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal />\r\n      <SearchBar />\r\n      <Results />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../../shared/utility\";\r\n\r\nconst initialState = {\r\n  query: null,\r\n  results: null,\r\n  loading: false,\r\n  modalOpen: false,\r\n  zoomedCardIndex: null\r\n};\r\n\r\nconst setSearchQuery = (state, action) => {\r\n  return updateObject(state, { query: action.query });\r\n};\r\nconst setResults = (state, action) => {\r\n  return updateObject(state, { results: action.results });\r\n};\r\nconst fetchStarted = (state, action) => {\r\n  return updateObject(state, { loading: true });\r\n};\r\nconst fetchFinished = (state, action) => {\r\n  return updateObject(state, { loading: false });\r\n};\r\nconst closeModal = (state, action) => {\r\n  return updateObject(state, { modalOpen: false });\r\n};\r\nconst openModal = (state, action) => {\r\n  return updateObject(state, {\r\n    modalOpen: true,\r\n    zoomedCardIndex: action.selectedCard\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_SEARCH_QUERY:\r\n      return setSearchQuery(state, action);\r\n    case actionTypes.SET_RESULTS:\r\n      return setResults(state, action);\r\n    case actionTypes.FETCH_STARTED:\r\n      return fetchStarted(state, action);\r\n    case actionTypes.FETCH_FINISHED:\r\n      return fetchFinished(state, action);\r\n    case actionTypes.CLOSE_MODAL:\r\n      return closeModal(state, action);\r\n    case actionTypes.OPEN_MODAL:\r\n      return openModal(state, action);\r\n    // case actionTypes.AUTH_START:\r\n    //   return authStart(state, action);\r\n    // case actionTypes.AUTH_SUCCESS:\r\n    //   return authSuccess(state, action);\r\n    // case actionTypes.AUTH_FAIL:\r\n    //   return authFail(state, action);\r\n    // case actionTypes.AUTH_LOGOUT:\r\n    //   return authLogOut(state, action);\r\n    // case actionTypes.SET_AUTH_REDIRECT:\r\n    //   return setAuthRedirectPath(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//reducers\nimport searchReducer from \"./store/reducers/search\";\n\nimport { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  search: searchReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(ReduxThunk))\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokeball.f7b41b0b.png\";"],"sourceRoot":""}