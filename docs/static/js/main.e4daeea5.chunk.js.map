{"version":3,"sources":["assets/logo.png","components/Searchbar/Searchbar.js","store/actions/search.js","store/actions/actionTypes.js","components/UI/Spinner/Spinner.js","components/Results/Card/Card.js","components/Results/Results.js","components/ZoomedCard/ImagePanel/ImagePanel.js","components/ZoomedCard/DataPanel/DataPanel.js","components/ZoomedCard/ZoomedCard.js","components/UI/Modal/Modal.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/search.js","index.js","assets/pokeball.png"],"names":["module","exports","connect","state","query","search","results","dispatch","setQuery","type","actions","fetchPokemon","pokemonQuery","a","document","title","array","split","map","string","index","modStr","replace","includes","params","join","axios","get","data","cards","cardsArray","console","log","error","props","className","src","Logo","alt","length","placeholder","onChange","event","target","value","onKeyPress","key","onClick","Pokeball","spinner","pokeball","openModal","selectedCard","setLoadedImages","useState","imageLoaded","setImageLoaded","image","name","imageUrl","id","style","display","onLoad","loading","loadedImages","list","message","card","LeftPanel","e","stopPropagation","imageUrlHiRes","artist","DataPanel","hp","types","subtype","retreatCost","set","series","rarity","zoomedCardIndex","modalOpen","closeModal","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","setSearchQuery","action","setResults","setError","clearLoadedImages","fetchStarted","fetchFinished","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","searchReducer","store","createStore","applyMiddleware","ReduxThunk","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4daeea5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7bbe3170.png\";","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nimport \"./Searchbar.scss\";\r\nimport Logo from \"../../assets/logo.png\";\r\nimport Pokeball from \"../../assets/pokeball.png\";\r\n\r\nconst Searchbar = props => {\r\n  return (\r\n    <div className=\"Searchbar\">\r\n      <div className={\"Searchbar-logo__wrapper\"}>\r\n        <img className={\"Searchbar-logo\"} src={Logo} alt=\"logo\" />\r\n      </div>\r\n      <div className=\"poke-circle\">\r\n        <div className=\"poke-circle2\">\r\n          <div className=\"poke-circle3\">\r\n            {props.results && props.results.length > 0\r\n              ? props.results.length\r\n              : \"\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={\"Searchbar-label__wrapper\"}>\r\n        <label className={\"Searchbar-label\"}>\r\n          What pokemon card are you looking for?\r\n        </label>\r\n      </div>\r\n      <div className={\"Searchbar-input__wrapper\"}>\r\n        <button className={\"Searchbar-button Searchbar-tooltip\"}>\r\n          ?\r\n          <span className={\"Searchbar-tooltiptext\"}>\r\n            <p>\r\n              Tip: You can add filters to your search with: hp, attackDamage,\r\n              attackCost, retreatCost.\r\n            </p>\r\n            <p>Example: 'Pikachu hp>70 attackDamage=80'</p>\r\n          </span>\r\n        </button>\r\n        <input\r\n          className={\"Searchbar-input\"}\r\n          type=\"text\"\r\n          placeholder=\"Search for Pokemon TCG cards!\"\r\n          onChange={event => props.setQuery(event.target.value)}\r\n          onKeyPress={event =>\r\n            event.key === \"Enter\" ? props.fetchPokemon(props.query) : null\r\n          }\r\n        />\r\n        <button\r\n          className={\"Searchbar-button\"}\r\n          onClick={() => props.fetchPokemon(props.query)}\r\n        >\r\n          <img src={Pokeball} alt=\"Search\" className={\"Searchbar-buttonImg\"} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.search.query,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setQuery: query => dispatch(actions.setSearchQuery(query)),\r\n    fetchPokemon: query => dispatch(actions.fetchPokemon(query))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Searchbar);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const setSearchQuery = query => {\r\n  return {\r\n    type: actionTypes.SET_SEARCH_QUERY,\r\n    query: query\r\n  };\r\n};\r\n\r\nexport const setResults = data => {\r\n  console.log(data);\r\n  return {\r\n    type: actionTypes.SET_RESULTS,\r\n    results: data\r\n  };\r\n};\r\n\r\nexport const fetchStarted = data => {\r\n  return {\r\n    type: actionTypes.FETCH_STARTED\r\n  };\r\n};\r\n\r\nexport const fetchFinished = data => {\r\n  return {\r\n    type: actionTypes.FETCH_FINISHED\r\n  };\r\n};\r\n\r\nexport const setError = error => {\r\n  console.log(error);\r\n  return {\r\n    type: actionTypes.SET_ERROR,\r\n    error: error\r\n  };\r\n};\r\n\r\nexport const setLoadedImages = () => {\r\n  return {\r\n    type: actionTypes.SET_LOADED_IMAGES\r\n  };\r\n};\r\nexport const clearLoadedImages = () => {\r\n  return {\r\n    type: actionTypes.CLEAR_LOADED_IMAGES\r\n  };\r\n};\r\n\r\nexport const fetchPokemon = pokemonQuery => {\r\n  return async dispatch => {\r\n    let params;\r\n    //default path\r\n    let query = \"https://api.pokemontcg.io/v1/cards\";\r\n    document.title = `Pokedex: ${pokemonQuery}`;\r\n\r\n    dispatch(fetchStarted());\r\n    dispatch(clearLoadedImages());\r\n\r\n    //query builder if input is present\r\n    if (pokemonQuery) {\r\n      let array = pokemonQuery.split(\" \").map((string, index) => {\r\n        let modStr = string.replace(\">\", \"=gt\").replace(\"<\", \"=lt\");\r\n        if (index > 0) {\r\n          return `&${modStr}`;\r\n        }\r\n        if (!modStr.includes(\"=\")) {\r\n          return `name=${string}`;\r\n        }\r\n        return modStr;\r\n      });\r\n      params = `?${array.join(\"\")}`;\r\n      query = `https://api.pokemontcg.io/v1/cards` + params;\r\n    }\r\n\r\n    try {\r\n      const results = await axios.get(query);\r\n      const cardsArray = await results.data.cards;\r\n      dispatch(setResults(cardsArray));\r\n      dispatch(fetchFinished());\r\n    } catch (error) {\r\n      dispatch(setError(error));\r\n      dispatch(fetchFinished());\r\n    }\r\n  };\r\n};\r\n\r\nexport const closeModal = () => {\r\n  return {\r\n    type: actionTypes.CLOSE_MODAL\r\n  };\r\n};\r\n\r\nexport const openModal = clickedCardIndex => {\r\n  return {\r\n    type: actionTypes.OPEN_MODAL,\r\n    selectedCard: clickedCardIndex\r\n  };\r\n};\r\n","export const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\r\nexport const SET_RESULTS = \"SET_RESULTS\";\r\n\r\nexport const FETCH_STARTED = \"FETCH_STARTED\";\r\nexport const FETCH_FINISHED = \"FETCH_FINISHED\";\r\n\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\nexport const OPEN_MODAL = \"OPEN_MODAL\";\r\n\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\nexport const SET_LOADED_IMAGES = \"SET_LOADED_IMAGES\";\r\nexport const CLEAR_LOADED_IMAGES = \"CLEAR_LOADED_IMAGES\";\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nimport pokeball from \"../../../assets/pokeball.png\";\r\n\r\nconst spinner = () => {\r\n  return <img alt={\"spinner\"} className=\"rotate\" src={pokeball} />;\r\n};\r\n\r\nexport default spinner;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const image = imageLoaded ? (\r\n    <img\r\n      className={\"Card\"}\r\n      alt={props.name}\r\n      src={props.imageUrl}\r\n      title={props.name}\r\n      id={props.id}\r\n      onClick={() => props.openModal(props.index)}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      {image}\r\n      {/* hidden div to render the wrapper only after its image is loaded */}\r\n      <div style={{ display: \"none\" }}>\r\n        <img\r\n          src={props.imageUrl}\r\n          alt={\"placeholder\"}\r\n          onLoad={() => {\r\n            setImageLoaded(true);\r\n            props.setLoadedImages();\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openModal: index => dispatch(actions.openModal(index)),\r\n    setLoadedImages: () => dispatch(actions.setLoadedImages())\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Card);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport Card from \"./Card/Card\";\r\n\r\nimport \"./Results.css\";\r\n\r\nconst Results = props => {\r\n  let list = null;\r\n  let spinner = null;\r\n  let error = null;\r\n  let style = { display: \"none\" };\r\n\r\n  //fetching data loading\r\n  if (props.loading) {\r\n    spinner = <Spinner />;\r\n    list = null;\r\n    //error handling\r\n  } else if (props.error) {\r\n    spinner = null;\r\n    error = <h3>ERROR: {props.error.message}!</h3>;\r\n    //results fetched\r\n  } else if (props.results && props.results.length !== 0) {\r\n    // spinner is active until all the images are rendered\r\n    spinner = <Spinner />;\r\n    // images finished rendering\r\n    if (props.results.length === props.loadedImages) {\r\n      style = { display: \"block\" };\r\n      spinner = null;\r\n    }\r\n    list = props.results.map((card, index) => {\r\n      return (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          index={index}\r\n          name={card.name}\r\n          imageUrl={card.imageUrl}\r\n        />\r\n      );\r\n    });\r\n  } else if (props.results && props.results.length === 0) {\r\n    error = <h3>No results found....</h3>;\r\n  }\r\n\r\n  return (\r\n    <div className={\"Results\"}>\r\n      {spinner}\r\n      {error}\r\n      <div style={style}>{list}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    results: state.search.results,\r\n    loading: state.search.loading,\r\n    error: state.search.error,\r\n    loadedImages: state.search.loadedImages\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Results);\r\n","import React from \"react\";\r\n\r\nimport \"./ImagePanel.css\";\r\n\r\nconst LeftPanel = ({ card }) => {\r\n  return (\r\n    <div className=\"leftPanel\" onClick={e => e.stopPropagation()}>\r\n      <img title={card.name} alt={card.name} src={card.imageUrlHiRes}></img>\r\n      <p>Artist: {card.artist}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftPanel;\r\n","import React from \"react\";\r\n\r\nimport \"./DataPanel.css\";\r\n\r\nconst DataPanel = ({ card }) => {\r\n  return (\r\n    <div className=\"rightPanel\" onClick={e => e.stopPropagation()}>\r\n      <h3 className=\"rightPanel_title\">Card information for {card.name}</h3>\r\n      <div className=\"rightPanel_details\">\r\n        <p>Hit Points: {card.hp}</p>\r\n        <p>Pokemon type(s): {card.types ? card.types.join(\" \") : null}</p>\r\n        <p>Subtype: {card.subtype}</p>\r\n        <p>\r\n          Reatreat Cost: {card.retreatCost ? card.retreatCost.join(\" \") : \"0\"}\r\n        </p>\r\n        <h4>Card data</h4>\r\n        <p>Set: {card.set}</p>\r\n        <p>Series: {card.series}</p>\r\n        <p>Card's Rarity: {card.rarity}</p>\r\n        <p>Unique ID: {card.id}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataPanel;\r\n","import React, { useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./ZoomedCard.css\";\r\nimport ImagePanel from \"./ImagePanel/ImagePanel\";\r\nimport DataPanel from \"./DataPanel/DataPanel\";\r\n\r\nconst ZoomedCard = props => {\r\n  //selecting a card fromt he results on the basis of props.selectedCard (by index)\r\n  const card = props.results[props.selectedCard];\r\n\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  document.title = card.name;\r\n\r\n  const image = imageLoaded ? (\r\n    <div className={\"zoomedWrapper\"}>\r\n      <ImagePanel card={card} />\r\n      <DataPanel card={card} />\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <Spinner />\r\n    </div>\r\n  );\r\n\r\n  const cardReady = (\r\n    <>\r\n      {image}\r\n      {/* hidden div to render the wrapper only after it hi res image is loaded */}\r\n      <div style={{ display: \"none\" }}>\r\n        <img\r\n          src={card.imageUrlHiRes}\r\n          alt={\"placeholder\"}\r\n          onLoad={() => setImageLoaded(true)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return cardReady;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedCard: state.search.zoomedCardIndex,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ZoomedCard);\r\n\r\n//Sample data from one card\r\n// artist: \"5ban Graphics\"\r\n// attacks: (2) [{…}, {…}]\r\n// convertedRetreatCost: 1\r\n// hp: \"130\"\r\n// id: \"xyp-XY174\"\r\n// imageUrl: \"https://images.pokemontcg.io/xyp/XY174.png\"\r\n// imageUrlHiRes: \"https://images.pokemontcg.io/xyp/XY174_hires.png\"\r\n// name: \"Pikachu-EX\"\r\n// nationalPokedexNumber: 25\r\n// number: \"XY174\"\r\n// rarity: \"Common\"\r\n// resistances: [{…}]\r\n// retreatCost: [\"Colorless\"]\r\n// series: \"XY\"\r\n// set: \"XY Black Star Promos\"\r\n// setCode: \"xyp\"\r\n// subtype: \"EX\"\r\n// supertype: \"Pokémon\"\r\n// text: [\"When a Pokémon-EX has been Knocked Out, your opponent takes 2 Prize cards.\"]\r\n// types: [\"Lightning\"]\r\n// weaknesses: [{…}]\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport ZoomedCard from \"../../ZoomedCard/ZoomedCard\";\r\n\r\nconst Modal = props => {\r\n  let modal = props.modalOpen ? (\r\n    <>\r\n      <div\r\n        className=\"Modal\"\r\n        onClick={() => {\r\n          props.closeModal();\r\n          document.title = `Pokedex: ${props.query}`;\r\n        }}\r\n      >\r\n        <ZoomedCard />\r\n      </div>\r\n    </>\r\n  ) : null;\r\n\r\n  return modal;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modalOpen: state.search.modalOpen,\r\n    query: state.search.query\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closeModal: () => dispatch(actions.closeModal())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\n//components\r\nimport SearchBar from \"./components/Searchbar/Searchbar\";\r\nimport Results from \"./components/Results/Results\";\r\nimport Modal from \"./components/UI/Modal/Modal\";\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal />\r\n      <SearchBar />\r\n      <Results />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../../shared/utility\";\r\n\r\nconst initialState = {\r\n  query: null,\r\n  results: null,\r\n  loading: false,\r\n  modalOpen: false,\r\n  zoomedCardIndex: null,\r\n  loadedImages: 0,\r\n  error: null\r\n};\r\n\r\nconst setSearchQuery = (state, action) => {\r\n  return updateObject(state, { query: action.query });\r\n};\r\nconst setResults = (state, action) => {\r\n  return updateObject(state, { results: action.results });\r\n};\r\nconst setError = (state, action) => {\r\n  return updateObject(state, { error: action.error });\r\n};\r\nconst setLoadedImages = (state, action) => {\r\n  return updateObject(state, { loadedImages: state.loadedImages + 1 });\r\n};\r\nconst clearLoadedImages = (state, action) => {\r\n  return updateObject(state, { loadedImages: 0 });\r\n};\r\nconst fetchStarted = (state, action) => {\r\n  return updateObject(state, { loading: true });\r\n};\r\nconst fetchFinished = (state, action) => {\r\n  return updateObject(state, { loading: false });\r\n};\r\nconst closeModal = (state, action) => {\r\n  return updateObject(state, { modalOpen: false, zoomedCardIndex: null });\r\n};\r\nconst openModal = (state, action) => {\r\n  return updateObject(state, {\r\n    modalOpen: true,\r\n    zoomedCardIndex: action.selectedCard\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_SEARCH_QUERY:\r\n      return setSearchQuery(state, action);\r\n    case actionTypes.SET_RESULTS:\r\n      return setResults(state, action);\r\n    case actionTypes.SET_ERROR:\r\n      return setError(state, action);\r\n    case actionTypes.SET_LOADED_IMAGES:\r\n      return setLoadedImages(state, action);\r\n    case actionTypes.CLEAR_LOADED_IMAGES:\r\n      return clearLoadedImages(state, action);\r\n    case actionTypes.FETCH_STARTED:\r\n      return fetchStarted(state, action);\r\n    case actionTypes.FETCH_FINISHED:\r\n      return fetchFinished(state, action);\r\n    case actionTypes.CLOSE_MODAL:\r\n      return closeModal(state, action);\r\n    case actionTypes.OPEN_MODAL:\r\n      return openModal(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//reducers\nimport searchReducer from \"./store/reducers/search\";\n\nimport { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  search: searchReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(ReduxThunk))\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokeball.f7b41b0b.png\";"],"sourceRoot":""}