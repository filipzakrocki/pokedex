{"version":3,"sources":["assets/pokeball.png","assets/logo.png","components/Search/Logo/Logo.js","components/Search/CounterCircle/CounterCircle.js","components/Search/QuestionBlurb/QuestionBlurb.js","components/Search/Searchbar/Tooltip/Tooltip.js","store/actions/search.js","store/actions/actionTypes.js","components/Search/Searchbar/SearchInput/SearchInput.js","components/Search/Searchbar/PokeSearchButton/PokeSearchButton.js","components/Search/Searchbar/Searchbar.js","components/Search/Search.js","components/UI/Spinner/Spinner.js","components/Results/Card/Card.js","components/Results/Results.js","components/ZoomedCard/ImagePanel/ImagePanel.js","components/ZoomedCard/DataPanel/DataPanel.js","components/ZoomedCard/ZoomedCard.js","components/UI/Modal/Modal.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/search.js","index.js"],"names":["module","exports","Logo","className","src","LogoIMG","alt","connect","state","results","search","props","length","QuestionBlurb","Tooltip","fetchPokemon","pokemonQuery","dispatch","a","query","document","title","type","array","split","map","string","index","modifiedString","replace","includes","params","join","axios","get","data","cards","cardsArray","console","log","error","setQuery","actions","placeholder","onChange","event","target","value","onKeyPress","key","onClick","Pokeball","Searchbar","Search","style","position","spinner","pokeball","openModal","selectedCard","setLoadedImages","useState","imageLoaded","setImageLoaded","image","name","imageUrl","id","display","onLoad","loading","loadedImages","list","message","card","LeftPanel","e","stopPropagation","imageUrlHiRes","artist","DataPanel","hp","types","subtype","retreatCost","set","series","rarity","zoomedCardIndex","modalOpen","closeModal","App","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","setSearchQuery","action","setResults","setError","clearLoadedImages","fetchStarted","fetchFinished","reducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","searchReducer","store","createStore","applyMiddleware","ReduxThunk","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afdbc5f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f7b41b0b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.7bbe3170.png\";","import React from \"react\";\r\nimport LogoIMG from \"../../../assets/logo.png\";\r\nimport \"./Logo.css\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className={\"Searchbar-logo__wrapper\"}>\r\n      <img className={\"Searchbar-logo\"} src={LogoIMG} alt=\"logo\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./CounterCircle.css\";\r\n\r\nconst CounterCircle = (props) => {\r\n  return (\r\n    <div className=\"poke-circle\">\r\n      <div className=\"poke-circle2\">\r\n        <div className=\"poke-circle3\">\r\n          {props.results && props.results.length > 0\r\n            ? props.results.length\r\n            : \"\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    results: state.search.results,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(CounterCircle);\r\n","import React from \"react\";\r\nimport \"./QuestionBlurb.css\";\r\n\r\nconst QuestionBlurb = () => {\r\n  return (\r\n    <div className={\"Searchbar-label__wrapper\"}>\r\n      <label className={\"Searchbar-label\"}>\r\n        What pokemon card are you looking for?\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBlurb;\r\n","import React from \"react\";\r\nimport \"./Tooltip.css\";\r\n\r\nconst Tooltip = () => {\r\n  return (\r\n    <button className={\"Searchbar-button Searchbar-tooltip\"}>\r\n      ?\r\n      <span className={\"Searchbar-tooltiptext\"}>\r\n        <p>\r\n          Tip: You can add filters to your search with: hp, attackDamage,\r\n          attackCost, retreatCost.\r\n        </p>\r\n        <p>Example: 'Pikachu hp>70 attackDamage=80'</p>\r\n      </span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const setSearchQuery = query => {\r\n  return {\r\n    type: actionTypes.SET_SEARCH_QUERY,\r\n    query: query\r\n  };\r\n};\r\n\r\nexport const setResults = data => {\r\n  console.log(data);\r\n  return {\r\n    type: actionTypes.SET_RESULTS,\r\n    results: data\r\n  };\r\n};\r\n\r\nexport const fetchStarted = data => {\r\n  return {\r\n    type: actionTypes.FETCH_STARTED\r\n  };\r\n};\r\n\r\nexport const fetchFinished = data => {\r\n  return {\r\n    type: actionTypes.FETCH_FINISHED\r\n  };\r\n};\r\n\r\nexport const setError = error => {\r\n  console.log(error);\r\n  return {\r\n    type: actionTypes.SET_ERROR,\r\n    error: error\r\n  };\r\n};\r\n\r\nexport const setLoadedImages = () => {\r\n  return {\r\n    type: actionTypes.SET_LOADED_IMAGES\r\n  };\r\n};\r\nexport const clearLoadedImages = () => {\r\n  return {\r\n    type: actionTypes.CLEAR_LOADED_IMAGES\r\n  };\r\n};\r\n\r\nexport const fetchPokemon = pokemonQuery => {\r\n  return async dispatch => {\r\n    let params, query;\r\n    //default path\r\n    query = \"https://api.pokemontcg.io/v1/cards\";\r\n    document.title = `Pokedex${\": \" + pokemonQuery}`;\r\n\r\n    dispatch(fetchStarted());\r\n    dispatch(clearLoadedImages());\r\n\r\n    //query builder if input is present\r\n    if (pokemonQuery) {\r\n      let array = pokemonQuery.split(\" \").map((string, index) => {\r\n        let modifiedString = string.replace(\">\", \"=gt\").replace(\"<\", \"=lt\");\r\n        if (index > 0) {\r\n          return `&${modifiedString}`;\r\n        }\r\n        if (!modifiedString.includes(\"=\")) {\r\n          return `name=${string}`;\r\n        }\r\n        return modifiedString;\r\n      });\r\n      params = `?${array.join(\"\")}`;\r\n      query = `https://api.pokemontcg.io/v1/cards` + params;\r\n    }\r\n\r\n    try {\r\n      const results = await axios.get(query);\r\n      const cardsArray = await results.data.cards;\r\n      dispatch(setResults(cardsArray));\r\n      dispatch(fetchFinished());\r\n    } catch (error) {\r\n      dispatch(setError(error));\r\n      dispatch(fetchFinished());\r\n    }\r\n  };\r\n};\r\n\r\nexport const closeModal = () => {\r\n  return {\r\n    type: actionTypes.CLOSE_MODAL\r\n  };\r\n};\r\n\r\nexport const openModal = clickedCardIndex => {\r\n  return {\r\n    type: actionTypes.OPEN_MODAL,\r\n    selectedCard: clickedCardIndex\r\n  };\r\n};\r\n","export const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\r\nexport const SET_RESULTS = \"SET_RESULTS\";\r\n\r\nexport const FETCH_STARTED = \"FETCH_STARTED\";\r\nexport const FETCH_FINISHED = \"FETCH_FINISHED\";\r\n\r\nexport const CLOSE_MODAL = \"CLOSE_MODAL\";\r\nexport const OPEN_MODAL = \"OPEN_MODAL\";\r\n\r\nexport const SET_ERROR = \"SET_ERROR\";\r\n\r\nexport const SET_LOADED_IMAGES = \"SET_LOADED_IMAGES\";\r\nexport const CLEAR_LOADED_IMAGES = \"CLEAR_LOADED_IMAGES\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../store/actions/index\";\r\nimport \"./SearchInput.css\";\r\n\r\nconst SearchInput = props => {\r\n  return (\r\n    <input\r\n      className={\"Searchbar-input\"}\r\n      type=\"text\"\r\n      placeholder=\"Search for Pokemon TCG cards!\"\r\n      onChange={event => props.setQuery(event.target.value)}\r\n      onKeyPress={event =>\r\n        event.key === \"Enter\" ? props.fetchPokemon(props.query) : null\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.search.query,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setQuery: query => dispatch(actions.setSearchQuery(query)),\r\n    fetchPokemon: query => dispatch(actions.fetchPokemon(query))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchInput);\r\n","import React from \"react\";\r\n//redux\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../store/actions/index\";\r\n//assets\r\nimport \"./PokeSearchButton.css\";\r\nimport Pokeball from \"../../../../assets/pokeball.png\";\r\n\r\nconst PokeSearchButton = props => {\r\n  return (\r\n    <button\r\n      className={\"Searchbar-button\"}\r\n      onClick={() => props.fetchPokemon(props.query)}\r\n    >\r\n      <img src={Pokeball} alt=\"Search\" className={\"Searchbar-buttonImg\"} />\r\n    </button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.search.query\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchPokemon: query => dispatch(actions.fetchPokemon(query))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PokeSearchButton);\r\n","import React from \"react\";\r\nimport \"./Searchbar.css\";\r\n//components\r\nimport Tooltip from \"./Tooltip/Tooltip\";\r\nimport SearchInput from \"./SearchInput/SearchInput\";\r\nimport PokeSearchButton from \"./PokeSearchButton/PokeSearchButton\";\r\n\r\nconst Searchbar = props => {\r\n  return (\r\n    <div className={\"Searchbar-input__wrapper\"}>\r\n      <Tooltip />\r\n      <SearchInput />\r\n      <PokeSearchButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\n\r\nimport \"./Search.scss\";\r\n\r\nimport Logo from \"./Logo/Logo\";\r\nimport CounterCircle from \"./CounterCircle/CounterCircle\";\r\nimport QuestionBlurb from \"./QuestionBlurb/QuestionBlurb\";\r\nimport Searchbar from \"./Searchbar/Searchbar\";\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"Search-wrapper\">\r\n        <Logo />\r\n        <QuestionBlurb />\r\n        <Searchbar />\r\n      </div>\r\n      <div style={{ position: \"absolute\" }}>\r\n        <CounterCircle />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nimport pokeball from \"../../../assets/pokeball.png\";\r\n\r\nconst spinner = () => {\r\n  return <img alt={\"spinner\"} className=\"rotate\" src={pokeball} />;\r\n};\r\n\r\nexport default spinner;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const image = imageLoaded ? (\r\n    <img\r\n      className={\"Card\"}\r\n      alt={props.name}\r\n      src={props.imageUrl}\r\n      title={props.name}\r\n      id={props.id}\r\n      onClick={() => props.openModal(props.index)}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      {image}\r\n      {/* hidden div to render the wrapper only after its image is loaded */}\r\n      <div style={{ display: \"none\" }}>\r\n        <img\r\n          src={props.imageUrl}\r\n          alt={\"placeholder\"}\r\n          onLoad={() => {\r\n            setImageLoaded(true);\r\n            props.setLoadedImages();\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openModal: index => dispatch(actions.openModal(index)),\r\n    setLoadedImages: () => dispatch(actions.setLoadedImages())\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Card);\r\n","import React from \"react\";\r\n\r\n//redux\r\nimport { connect } from \"react-redux\";\r\n\r\n//components\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport Card from \"./Card/Card\";\r\n\r\nimport \"./Results.css\";\r\n\r\nconst Results = props => {\r\n  let list = null;\r\n  let spinner = null;\r\n  let error = null;\r\n  let style = { display: \"none\" };\r\n\r\n  //fetching data loading\r\n  if (props.loading) {\r\n    spinner = <Spinner />;\r\n    list = null;\r\n    //error handling\r\n  } else if (props.error) {\r\n    spinner = null;\r\n    error = <h3>ERROR: {props.error.message}!</h3>;\r\n    //results fetched\r\n  } else if (props.results && props.results.length !== 0) {\r\n    // spinner is active until all the images are rendered\r\n    spinner = <Spinner />;\r\n    // images finished rendering\r\n    if (props.results.length === props.loadedImages) {\r\n      style = { display: \"block\" };\r\n      spinner = null;\r\n    }\r\n    list = props.results.map((card, index) => {\r\n      return (\r\n        <Card\r\n          key={card.id}\r\n          id={card.id}\r\n          index={index}\r\n          name={card.name}\r\n          imageUrl={card.imageUrl}\r\n        />\r\n      );\r\n    });\r\n  } else if (props.results && props.results.length === 0) {\r\n    error = <h3>No results found....</h3>;\r\n  }\r\n\r\n  return (\r\n    <div className={\"Results\"}>\r\n      {spinner}\r\n      {error}\r\n      <div style={style}>{list}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    results: state.search.results,\r\n    loading: state.search.loading,\r\n    error: state.search.error,\r\n    loadedImages: state.search.loadedImages\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Results);\r\n","import React from \"react\";\r\n\r\nimport \"./ImagePanel.css\";\r\n\r\nconst LeftPanel = ({ card }) => {\r\n  return (\r\n    <div className=\"leftPanel\" onClick={e => e.stopPropagation()}>\r\n      <img title={card.name} alt={card.name} src={card.imageUrlHiRes}></img>\r\n      <p>Artist: {card.artist}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeftPanel;\r\n","import React from \"react\";\r\n\r\nimport \"./DataPanel.css\";\r\n\r\nconst DataPanel = ({ card }) => {\r\n  return (\r\n    <div className=\"rightPanel\" onClick={e => e.stopPropagation()}>\r\n      <h3 className=\"rightPanel_title\">Card information for {card.name}</h3>\r\n      <div className=\"rightPanel_details\">\r\n        <p>Hit Points: {card.hp}</p>\r\n        <p>Pokemon type(s): {card.types ? card.types.join(\" \") : null}</p>\r\n        <p>Subtype: {card.subtype}</p>\r\n        <p>\r\n          Reatreat Cost: {card.retreatCost ? card.retreatCost.join(\" \") : \"0\"}\r\n        </p>\r\n        <h4>Card data</h4>\r\n        <p>Set: {card.set}</p>\r\n        <p>Series: {card.series}</p>\r\n        <p>Card's Rarity: {card.rarity}</p>\r\n        <p>Unique ID: {card.id}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataPanel;\r\n","import React, { useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./ZoomedCard.css\";\r\nimport ImagePanel from \"./ImagePanel/ImagePanel\";\r\nimport DataPanel from \"./DataPanel/DataPanel\";\r\n\r\nconst ZoomedCard = props => {\r\n  //selecting a card from the results on the basis of props.selectedCard (by index)\r\n  const card = props.results[props.selectedCard];\r\n\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  document.title = card.name;\r\n\r\n  const image = imageLoaded ? (\r\n    <div className={\"zoomedWrapper\"}>\r\n      <ImagePanel card={card} />\r\n      <DataPanel card={card} />\r\n    </div>\r\n  ) : (\r\n    <Spinner />\r\n  );\r\n\r\n  const cardReady = (\r\n    <>\r\n      {image}\r\n      {/* hidden div to render the wrapper only after it hi res image is loaded */}\r\n      <div style={{ display: \"none\" }}>\r\n        <img\r\n          src={card.imageUrlHiRes}\r\n          alt={\"placeholder\"}\r\n          onLoad={() => setImageLoaded(true)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return cardReady;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedCard: state.search.zoomedCardIndex,\r\n    results: state.search.results\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ZoomedCard);\r\n\r\n//Sample data from one card\r\n// artist: \"5ban Graphics\"\r\n// attacks: (2) [{…}, {…}]\r\n// convertedRetreatCost: 1\r\n// hp: \"130\"\r\n// id: \"xyp-XY174\"\r\n// imageUrl: \"https://images.pokemontcg.io/xyp/XY174.png\"\r\n// imageUrlHiRes: \"https://images.pokemontcg.io/xyp/XY174_hires.png\"\r\n// name: \"Pikachu-EX\"\r\n// nationalPokedexNumber: 25\r\n// number: \"XY174\"\r\n// rarity: \"Common\"\r\n// resistances: [{…}]\r\n// retreatCost: [\"Colorless\"]\r\n// series: \"XY\"\r\n// set: \"XY Black Star Promos\"\r\n// setCode: \"xyp\"\r\n// subtype: \"EX\"\r\n// supertype: \"Pokémon\"\r\n// text: [\"When a Pokémon-EX has been Knocked Out, your opponent takes 2 Prize cards.\"]\r\n// types: [\"Lightning\"]\r\n// weaknesses: [{…}]\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport ZoomedCard from \"../../ZoomedCard/ZoomedCard\";\r\n\r\nconst Modal = props => {\r\n  \r\n  let modal = props.modalOpen ? (\r\n    <>\r\n      <div\r\n        className=\"Modal\"\r\n        onClick={() => {\r\n          props.closeModal();\r\n          document.title = `Pokedex: ${props.query}`;\r\n        }}\r\n      >\r\n        <ZoomedCard />\r\n      </div>\r\n    </>\r\n  ) : null;\r\n\r\n  return modal;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    modalOpen: state.search.modalOpen,\r\n    query: state.search.query\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    closeModal: () => dispatch(actions.closeModal())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\n//components\r\nimport Search from \"./components/Search/Search\";\r\nimport Results from \"./components/Results/Results\";\r\nimport Modal from \"./components/UI/Modal/Modal\";\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal />\r\n      <Search />\r\n      <Results />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties\r\n  };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../../shared/utility\";\r\n\r\nconst initialState = {\r\n  query: null,\r\n  results: null,\r\n  loading: false,\r\n  modalOpen: false,\r\n  zoomedCardIndex: null,\r\n  loadedImages: 0,\r\n  error: null,\r\n};\r\n\r\nconst setSearchQuery = (state, action) => {\r\n  return updateObject(state, { query: action.query });\r\n};\r\nconst setResults = (state, action) => {\r\n  return updateObject(state, { results: action.results });\r\n};\r\nconst setError = (state, action) => {\r\n  return updateObject(state, { error: action.error });\r\n};\r\nconst setLoadedImages = (state, action) => {\r\n  return updateObject(state, { loadedImages: state.loadedImages + 1 });\r\n};\r\nconst clearLoadedImages = (state, action) => {\r\n  return updateObject(state, { loadedImages: 0 });\r\n};\r\nconst fetchStarted = (state, action) => {\r\n  return updateObject(state, { loading: true });\r\n};\r\nconst fetchFinished = (state, action) => {\r\n  return updateObject(state, { loading: false });\r\n};\r\nconst closeModal = (state, action) => {\r\n  return updateObject(state, { modalOpen: false, zoomedCardIndex: null });\r\n};\r\nconst openModal = (state, action) => {\r\n  return updateObject(state, {\r\n    modalOpen: true,\r\n    zoomedCardIndex: action.selectedCard,\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_SEARCH_QUERY:\r\n      return setSearchQuery(state, action);\r\n    case actionTypes.SET_RESULTS:\r\n      return setResults(state, action);\r\n    case actionTypes.SET_ERROR:\r\n      return setError(state, action);\r\n    case actionTypes.SET_LOADED_IMAGES:\r\n      return setLoadedImages(state, action);\r\n    case actionTypes.CLEAR_LOADED_IMAGES:\r\n      return clearLoadedImages(state, action);\r\n    case actionTypes.FETCH_STARTED:\r\n      return fetchStarted(state, action);\r\n    case actionTypes.FETCH_FINISHED:\r\n      return fetchFinished(state, action);\r\n    case actionTypes.CLOSE_MODAL:\r\n      return closeModal(state, action);\r\n    case actionTypes.OPEN_MODAL:\r\n      return openModal(state, action);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//reducers\r\nimport searchReducer from \"./store/reducers/search\";\r\n\r\nimport { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n  search: searchReducer\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(ReduxThunk))\r\n);\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}